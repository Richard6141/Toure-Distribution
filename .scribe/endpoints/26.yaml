name: 'Gestion des Rôles et Permissions'
description: |-

  API pour gérer les rôles, permissions et leurs assignations
endpoints:
  -
    httpMethods:
      - GET
    uri: api/roles-permissions/statistics
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Statistiques globales'
      description: 'Récupère les statistiques générales sur les rôles et permissions.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Statistiques récupérées avec succès",
            "data": {
              "total_roles": 11,
              "total_permissions": 161,
              "total_users_with_roles": 45,
              "roles_breakdown": [
                {
                  "role": "Super Admin",
                  "users_count": 2,
                  "permissions_count": 161
                },
                {
                  "role": "Comptable",
                  "users_count": 5,
                  "permissions_count": 30
                }
              ],
              "permissions_by_module": {
                "users": 8,
                "clients": 9,
                "stocks": 15
              }
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/roles-permissions/roles
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Liste des rôles'
      description: 'Récupère la liste de tous les rôles avec leurs permissions et statistiques.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      search:
        name: search
        description: 'Rechercher un rôle par nom.'
        required: false
        example: Admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: "Nombre d'éléments par page."
        required: false
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      with_permissions:
        name: with_permissions
        description: 'Inclure les permissions de chaque rôle.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      with_users_count:
        name: with_users_count
        description: "Inclure le nombre d'utilisateurs par rôle."
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      search: Admin
      per_page: 15
      with_permissions: true
      with_users_count: true
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Liste des rôles récupérée avec succès",
            "data": {
              "roles": [
                {
                  "id": 1,
                  "name": "Super Admin",
                  "guard_name": "web",
                  "created_at": "2025-01-15T10:30:00.000000Z",
                  "updated_at": "2025-01-15T10:30:00.000000Z",
                  "permissions_count": 161,
                  "users_count": 2,
                  "permissions": [
                    {
                      "id": 1,
                      "name": "users.view",
                      "libelle": "Consulter les utilisateurs"
                    }
                  ]
                }
              ],
              "pagination": {
                "total": 11,
                "per_page": 15,
                "current_page": 1,
                "last_page": 1
              }
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/roles-permissions/roles
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Créer un rôle'
      description: 'Crée un nouveau rôle avec ou sans permissions.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Le nom du rôle.'
        required: true
        example: Superviseur
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      permissions:
        name: permissions
        description: 'Les IDs des permissions à assigner.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: Superviseur
      permissions:
        - 1
        - 2
        - 3
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "success": true,
            "message": "Rôle créé avec succès",
            "data": {
              "role": {
                "id": 12,
                "name": "Superviseur",
                "guard_name": "web",
                "created_at": "2025-10-18T15:30:00.000000Z",
                "updated_at": "2025-10-18T15:30:00.000000Z",
                "permissions": [
                  {
                    "id": 1,
                    "name": "users.view",
                    "libelle": "Consulter les utilisateurs"
                  }
                ]
              }
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "success": false,
            "message": "Erreur de validation",
            "errors": {
              "name": ["Le nom du rôle est obligatoire"]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/roles-permissions/roles/{id}'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: "Détails d'un rôle"
      description: "Récupère les informations détaillées d'un rôle spécifique."
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: "L'ID du rôle."
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Rôle récupéré avec succès",
            "data": {
              "role": {
                "id": 1,
                "name": "Super Admin",
                "guard_name": "web",
                "created_at": "2025-01-15T10:30:00.000000Z",
                "updated_at": "2025-01-15T10:30:00.000000Z",
                "permissions_count": 161,
                "users_count": 2,
                "permissions": [],
                "users": []
              }
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "success": false,
            "message": "Rôle non trouvé"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/roles-permissions/roles/{id}'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Mettre à jour un rôle'
      description: "Met à jour le nom d'un rôle existant."
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: "L'ID du rôle."
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Le nouveau nom du rôle.'
        required: true
        example: 'Super Administrateur'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'Super Administrateur'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Rôle mis à jour avec succès",
            "data": {
              "role": {
                "id": 1,
                "name": "Super Administrateur",
                "guard_name": "web",
                "updated_at": "2025-10-18T15:35:00.000000Z"
              }
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/roles-permissions/roles/{id}'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Mettre à jour un rôle'
      description: "Met à jour le nom d'un rôle existant."
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: "L'ID du rôle."
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Le nouveau nom du rôle.'
        required: true
        example: 'Super Administrateur'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'Super Administrateur'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Rôle mis à jour avec succès",
            "data": {
              "role": {
                "id": 1,
                "name": "Super Administrateur",
                "guard_name": "web",
                "updated_at": "2025-10-18T15:35:00.000000Z"
              }
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/roles-permissions/roles/{id}'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Supprimer un rôle'
      description: 'Supprime un rôle. Impossible si des utilisateurs sont assignés à ce rôle.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: "L'ID du rôle."
        required: true
        example: 12
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 12
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Rôle supprimé avec succès"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 409
        content: |-
          {
            "success": false,
            "message": "Impossible de supprimer ce rôle car 5 utilisateur(s) y sont assignés"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/roles-permissions/roles/{roleId}/permissions/assign'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Assigner des permissions à un rôle'
      description: "Attribue ou retire des permissions à/d'un rôle spécifique."
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      roleId:
        name: roleId
        description: "L'ID du rôle."
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      roleId: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      permissions:
        name: permissions
        description: 'Les IDs des permissions à assigner.'
        required: true
        example:
          - 1
          - 2
          - 3
          - 10
          - 15
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sync:
        name: sync
        description: 'Remplacer toutes les permissions (true) ou ajouter (false).'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      permissions:
        - 1
        - 2
        - 3
        - 10
        - 15
      sync: true
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Permissions assignées avec succès",
            "data": {
              "role": "Comptable",
              "permissions_count": 30,
              "permissions": []
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/roles-permissions/roles/{roleId}/permissions/revoke'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: "Retirer des permissions d'un rôle"
      description: "Retire des permissions spécifiques d'un rôle."
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      roleId:
        name: roleId
        description: "L'ID du rôle."
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      roleId: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      permissions:
        name: permissions
        description: 'Les IDs des permissions à retirer.'
        required: true
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      permissions:
        - 1
        - 2
        - 3
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Permissions retirées avec succès",
            "data": {
              "role": "Comptable",
              "permissions_removed": 3,
              "permissions_remaining": 27
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/roles-permissions/roles/{roleId}/users'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Utilisateurs par rôle'
      description: 'Récupère la liste des utilisateurs ayant un rôle spécifique.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      roleId:
        name: roleId
        description: "L'ID du rôle."
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      roleId: 5
    queryParameters:
      per_page:
        name: per_page
        description: "Nombre d'utilisateurs par page."
        required: false
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      per_page: 15
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Utilisateurs du rôle récupérés avec succès",
            "data": {
              "role": "Comptable",
              "users": [
                {
                  "id": 5,
                  "name": "John Doe",
                  "email": "john@example.com",
                  "created_at": "2025-01-10T08:00:00.000000Z"
                }
              ],
              "total": 3
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/roles-permissions/permissions
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Liste des permissions'
      description: 'Récupère la liste de toutes les permissions, optionnellement groupées par module.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      search:
        name: search
        description: 'Rechercher une permission.'
        required: false
        example: clients
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      grouped:
        name: grouped
        description: 'Grouper par module (prefix).'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: "Nombre d'éléments par page (ignoré si grouped=true)."
        required: false
        example: 50
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      search: clients
      grouped: true
      per_page: 50
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Liste des permissions récupérée avec succès",
            "data": {
              "permissions": [
                {
                  "id": 1,
                  "name": "users.view",
                  "libelle": "Consulter les utilisateurs",
                  "guard_name": "web",
                  "created_at": "2025-01-15T10:30:00.000000Z"
                }
              ],
              "total": 161
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Liste des permissions groupées récupérée avec succès",
            "data": {
              "permissions": {
                "users": [
                  {
                    "id": 1,
                    "name": "users.view",
                    "libelle": "Consulter les utilisateurs"
                  }
                ],
                "clients": [
                  {
                    "id": 9,
                    "name": "clients.view",
                    "libelle": "Consulter les clients"
                  }
                ]
              },
              "total": 161
            }
          }
        headers: []
        description: 'Groupé par module'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/roles-permissions/permissions
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Créer une permission'
      description: 'Crée une nouvelle permission dans le système.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Le nom de la permission (format: module.action).'
        required: true
        example: rapports.custom
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      libelle:
        name: libelle
        description: 'Le libellé descriptif de la permission.'
        required: true
        example: 'Générer des rapports personnalisés'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: rapports.custom
      libelle: 'Générer des rapports personnalisés'
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "success": true,
            "message": "Permission créée avec succès",
            "data": {
              "permission": {
                "id": 162,
                "name": "rapports.custom",
                "libelle": "Générer des rapports personnalisés",
                "guard_name": "web",
                "created_at": "2025-10-18T15:40:00.000000Z"
              }
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/roles-permissions/permissions/{id}'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Mettre à jour une permission'
      description: "Met à jour le libellé d'une permission existante."
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: "L'ID de la permission."
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      libelle:
        name: libelle
        description: 'Le nouveau libellé.'
        required: true
        example: 'Voir tous les utilisateurs'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      libelle: 'Voir tous les utilisateurs'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Permission mise à jour avec succès",
            "data": {
              "permission": {
                "id": 1,
                "name": "users.view",
                "libelle": "Voir tous les utilisateurs",
                "updated_at": "2025-10-18T15:45:00.000000Z"
              }
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/roles-permissions/permissions/{id}'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Mettre à jour une permission'
      description: "Met à jour le libellé d'une permission existante."
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: "L'ID de la permission."
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      libelle:
        name: libelle
        description: 'Le nouveau libellé.'
        required: true
        example: 'Voir tous les utilisateurs'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      libelle: 'Voir tous les utilisateurs'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Permission mise à jour avec succès",
            "data": {
              "permission": {
                "id": 1,
                "name": "users.view",
                "libelle": "Voir tous les utilisateurs",
                "updated_at": "2025-10-18T15:45:00.000000Z"
              }
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/roles-permissions/permissions/{id}'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Supprimer une permission'
      description: 'Supprime une permission du système.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: "L'ID de la permission."
        required: true
        example: 162
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 162
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Permission supprimée avec succès"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/roles-permissions/users/{userId}/roles/assign'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: 'Assigner des rôles à un utilisateur'
      description: 'Attribue un ou plusieurs rôles à un utilisateur.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      userId:
        name: userId
        description: "L'ID de l'utilisateur."
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      userId: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      roles:
        name: roles
        description: 'Les IDs ou noms des rôles à assigner.'
        required: true
        example:
          - 1
          - Comptable
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sync:
        name: sync
        description: 'Remplacer tous les rôles (true) ou ajouter (false).'
        required: false
        example: false
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      roles:
        - 1
        - Comptable
      sync: false
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Rôles assignés avec succès",
            "data": {
              "user": {
                "id": 5,
                "name": "John Doe",
                "email": "john@example.com"
              },
              "roles": ["Comptable", "Agent commercial"],
              "all_permissions_count": 45
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/roles-permissions/users/{userId}/roles/revoke'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: "Retirer des rôles d'un utilisateur"
      description: "Retire un ou plusieurs rôles d'un utilisateur."
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      userId:
        name: userId
        description: "L'ID de l'utilisateur."
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      userId: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      roles:
        name: roles
        description: 'Les IDs ou noms des rôles à retirer.'
        required: true
        example:
          - 'Agent commercial'
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      roles:
        - 'Agent commercial'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Rôles retirés avec succès",
            "data": {
              "user": "John Doe",
              "roles_removed": 1,
              "roles_remaining": ["Comptable"]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/roles-permissions/users/{userId}/permissions'
    metadata:
      groupName: 'Gestion des Rôles et Permissions'
      groupDescription: |-

        API pour gérer les rôles, permissions et leurs assignations
      subgroup: ''
      subgroupDescription: ''
      title: "Permissions d'un utilisateur"
      description: "Récupère toutes les permissions d'un utilisateur (directes + via rôles)."
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      userId:
        name: userId
        description: "L'ID de l'utilisateur."
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      userId: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Permissions de l'utilisateur récupérées avec succès",
            "data": {
              "user": {
                "id": 5,
                "name": "John Doe",
                "email": "john@example.com"
              },
              "roles": ["Comptable", "Agent commercial"],
              "permissions": [
                {
                  "id": 1,
                  "name": "users.view",
                  "libelle": "Consulter les utilisateurs",
                  "source": "role:Comptable"
                }
              ],
              "total_permissions": 45
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
